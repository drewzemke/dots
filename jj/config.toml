"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

# NOTE: MAKE SURE YOU'RE EDITING THIS FILE IN ~/dots!

[user]
name = "Drew Zemke"
email = "{{email}}"

[ui]
default-command = "log"
pager = ["delta", "--pager", "less -FRX"]
diff-formatter = ":git"

[revsets]
log = '@ | ancestors(trunk()..(visible_heads() & mine()), 2) | trunk()'

[aliases]
tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]
rebase-all = ["rebase", "-s", "all:roots(trunk()..mutable())", "-d", "trunk()"]

[extra]
# Prefixes to highlight in commit messages
highlight-prefixes = ["WIP", "EXP", "TODO", "FIXME", "DRAFT"]

[template-aliases]
# helper function to highlight specified prefixes in commit messages
'highlight_prefixes(line)' = '''
coalesce(
  config("extra.highlight-prefixes").as_string_list().map(|prefix| 
    if(line.lower().starts_with(prefix.lower() ++ ":"),
      label("timestamp", prefix.upper() ++ ":")
        ++ line.substr(prefix.len() + 1, line.len()),
      ""
    )
  ).join(""),
  line
)
'''

# use relative timestamps up to one day ago
"format_timestamp(timestamp)" = '''
if(timestamp.after("1 day ago"),
  timestamp.ago(),
  timestamp.format("%Y-%m-%d %H:%M")
)
'''

"in_branch(commit)" = 'commit.contained_in("immutable_heads()..bookmarks()")'

[templates]
# formats commit messages in log by highlighting configurable prefixes
log = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      format_short_commit_header(self) ++ "\n",
      separate(" ",
        if(empty, label("empty", "(empty)")),
        if(description,
          highlight_prefixes(description.first_line()),
          label(if(empty, "empty"), description_placeholder)
        )
      ) ++ "\n"
    )
  )
)
'''

# shows changes in editor when editing commit description
draft_commit_description = '''
concat(
  coalesce(description, default_commit_description, "\n"),
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.summary()),
  ),
  "\nJJ: ignore-rest\n",
  diff.git(),
)
'''

commit_summary = '''
separate(" ",
  change_id.shortest(),
  commit_id.shortest(),
  if(empty, label("empty", "(empty)")),
  if(description,
    highlight_prefixes(description.first_line()),
    label(if(empty, "empty"), description_placeholder)
  )
) 
'''

# shows an empty diamond for commits that are mutable but ancestors of a bookmark
# meaning they'll be synced by the next push
log_node = '''
if(self && !current_working_copy && !immutable && !conflict && in_branch(self),
  "â—‡",
  builtin_log_node
)
'''
