# npm i -g @olrtg/emmet-language-server vscode-langservers-extracted typescript-language-server

[[language]]
name = "rust"
auto-format = true

[language-server.rust-analyzer.config]
checkOnSave = { command = "clippy" }
diagnostics = { enable = true, experimental = { enable = true } }

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"

[[languages]]
name = "go"
auto-format = true
formatter = { command = "goimports" }

[[language]]
name = "toml"
auto-format = true

[[language]]
name = "fish"
auto-format = false

# NOTE: This is entirely to support kmonad config ('.kbd') files
# I guess if I ever start using lisp, I'll have to change this
[[language]]
name = "common-lisp"
roots = []
file-types = ["kbd"]
comment-token = ";;"

[[language]]
name = "wgsl"
auto-format = true

[[language]]
name = "markdown"
language-servers = ["marksman"]

[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "eslint"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-lsp"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-lsp"]
grammar = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [ "typescript-language-server", "eslint"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "json"
language-servers = [ "vscode-json-language-server" ]
formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[[language]]
name = "html"
formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
language-servers = [ "vscode-html-language-server", "emmet-lsp"] 

[[language]]
name = "css"
formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
language-servers = [ "vscode-css-language-server"]

[[language]]
name = "graphql"
language-servers = [ "graphql" ]
comment-token = "#"

[language-server.graphql]
command = "graphql-lsp"
args = ["server", "-m", "stream"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.vscode-json-language-server.config]
provideFormatter = true

[language-server.vscode-json-language-server.config.json]
validate = { enable = true }
format = { enable = true }

[[language-server.vscode-json-language-server.config.json.schemas]]
fileMatch = ["package.json"]
url = "https://json.schemastore.org/package.json"

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
experimental = { }
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

[language-server.typescript-language-server.config]
documentFormatting = false
hostInfo = "helix"


[language-server.cspell]
command = "cspell-lsp"
args = ["--stdio"]
