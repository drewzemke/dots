# npm i -g @olrtg/emmet-language-server vscode-langservers-extracted typescript-language-server
# cargo install lsp-ai

[[language]]
language-servers = ["rust-analyzer", "lsp-ai-code"]
name = "rust"
auto-format = true

[language-server.rust-analyzer.config]
checkOnSave = { command = "clippy" }
diagnostics = { enable = true, experimental = { enable = true } }

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"

[[languages]]
name = "go"
auto-format = true
formatter = { command = "goimports" }

[[language]]
name = "toml"
auto-format = true

[[language]]
name = "fish"
auto-format = false

# NOTE: This is entirely to support kmonad config ('.kbd') files
# I guess if I ever start using lisp, I'll have to change this
[[language]]
name = "common-lisp"
roots = []
file-types = ["kbd"]
comment-token = ";;"

[[language]]
name = "wgsl"
auto-format = true

[[language]]
name = "markdown"
language-servers = ["marksman", "lsp-ai-chat"]

[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "eslint", "lsp-ai-code"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "tsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-lsp", "lsp-ai-code"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "eslint", "emmet-lsp"]
grammar = "javascript"
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "javascript"
language-servers = [ "typescript-language-server", "eslint"]
formatter = { command = 'prettier', args = ["--parser", "typescript"] }
auto-format = true

[[language]]
name = "json"
language-servers = [ "vscode-json-language-server" ]
formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[[language]]
name = "html"
formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
language-servers = [ "vscode-html-language-server", "emmet-lsp"] 

[[language]]
name = "css"
formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
language-servers = [ "vscode-css-language-server"]

[[language]]
name = "graphql"
language-servers = [ "graphql" ]
comment-token = "#"

[language-server.graphql]
command = "graphql-lsp"
args = ["server", "-m", "stream"]

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[language-server.vscode-json-language-server.config]
provideFormatter = true

[language-server.vscode-json-language-server.config.json]
validate = { enable = true }
format = { enable = true }

[[language-server.vscode-json-language-server.config.json.schemas]]
fileMatch = ["package.json"]
url = "https://json.schemastore.org/package.json"

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
experimental = { }
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

[language-server.typescript-language-server.config]
documentFormatting = false
hostInfo = "helix"


[language-server.cspell]
command = "cspell-lsp"
args = ["--stdio"]


#####################################
### Configuration for lsp-ai-chat ###
#####################################

[language-server.lsp-ai-chat]
command = "lsp-ai"

[language-server.lsp-ai-chat.config.memory]
file_store = { }

[language-server.lsp-ai-chat.config.models.model1]
type = "open_ai"
chat_endpoint = "https://api.openai.com/v1/chat/completions"
model = "gpt-4o"
auth_token_env_var_name = "OPENAI_API_TOKEN"

[language-server.lsp-ai-chat.config.models.model2]
type = "anthropic"
chat_endpoint = "https://api.anthropic.com/v1/messages"
model = "claude-3-5-sonnet-20240620"
auth_token_env_var_name = "ANTHROPIC_API_TOKEN"

[[language-server.lsp-ai-chat.config.chat]]
trigger = "!C"
action_display_name = "Chat"
model = "model2"

[language-server.lsp-ai-chat.config.chat.parameters]
max_context = 4096
max_tokens = 1024
system = """
You are a code assistant chatbot. 
The user will ask you for assistance coding and you will do your best to answer succinctly and accurately. 
You will also format your responses using markdown where appropriate.
"""


#####################################
### Configuration for lsp-ai-code ###
#####################################

[language-server.lsp-ai-code]
command = "lsp-ai"

[language-server.lsp-ai-code.config.memory]
file_store = { }

[language-server.lsp-ai-code.config.models.model1]
type = "open_ai"
chat_endpoint = "https://api.openai.com/v1/chat/completions"
model =  "gpt-4o"
auth_token_env_var_name = "OPENAI_API_TOKEN"

[language-server.lsp-ai-code.config.models.model2]
type = "anthropic"
chat_endpoint = "https://api.anthropic.com/v1/messages"
model = "claude-3-5-sonnet-20240620"
auth_token_env_var_name = "ANTHROPIC_API_TOKEN"

[[language-server.lsp-ai-code.config.actions]]
action_display_name = "Refactor"
model = "model2"

[language-server.lsp-ai-code.config.actions.parameters]
max_context = 4096
max_tokens = 4096
system = """
You are an AI coding assistant specializing in code refactoring. Your task is to analyze the given code snippet and provide a refactored version. Follow these steps:\n\n
1. Analyze the code context and structure.\n
2. Identify areas for improvement, such as code efficiency, readability, or adherence to best practices.\n
3. Provide your chain of thought reasoning, wrapped in <reasoning> tags. Include your analysis of the current code and explain your refactoring decisions.\n
4. Rewrite the entire code snippet with your refactoring applied.\n
5. Wrap your refactored code solution in <answer> tags.\n\n
Your response should always include both the reasoning and the refactored code.\n\n
<examples>\n
<example>\n
User input:\n
def calculate_total(items):\n
    total = 0\n
    for item in items:\n
        total = total + item['price'] * item['quantity']\n
    return total\n\n\n
Response:\n
<reasoning>\n
1. The function calculates the total cost of items based on price and quantity.\n
2. We can improve readability and efficiency by:\n
   a. Using a more descriptive variable name for the total.\n
   b. Utilizing the sum() function with a generator expression.\n
   c. Using augmented assignment (+=) if we keep the for loop.\n
3. We'll implement the sum() function approach for conciseness.\n
4. We'll add a type hint for better code documentation.\n
</reasoning>\n
<answer>\n
from typing import List, Dict\n\n
def calculate_total(items: List[Dict[str, float]]) -> float:\n
    return sum(item['price'] * item['quantity'] for item in items)\n
</answer>\n
</example>\n\n
<example>\n
User input:\n
def is_prime(n):\n
    if n < 2:\n
        return False\n
    for i in range(2, n):\n
        if n % i == 0:\n
            return False\n
    return True\n\n\n
Response:\n
<reasoning>\n
1. This function checks if a number is prime, but it's not efficient for large numbers.\n
2. We can improve it by:\n
   a. Adding an early return for 2, the only even prime number.\n
   b. Checking only odd numbers up to the square root of n.\n
   c. Using a more efficient range (start at 3, step by 2).\n
3. We'll also add a type hint for better documentation.\n
4. The refactored version will be more efficient for larger numbers.\n
</reasoning>\n
<answer>\n
import math\n\n
def is_prime(n: int) -> bool:\n
    if n < 2:\n
        return False\n
    if n == 2:\n
        return True\n
    if n % 2 == 0:\n
        return False\n
    \n
    for i in range(3, int(math.sqrt(n)) + 1, 2):\n
        if n % i == 0:\n
            return False\n
    return True\n
</answer>\n
</example>\n
</examples>
"""

[[language-server.lsp-ai-code.config.actions.parameters.messages]]
role = "user"
content = "{SELECTED_TEXT}"

[language-server.lsp-ai-code.config.actions.post_process]
extractor = "(?s)<answer>(.*?)</answer>"


[[language-server.lsp-ai-code.config.actions]]
action_display_name = "Add Documentation"
model = "model2"

[language-server.lsp-ai-code.config.actions.parameters]
max_context = 4096
max_tokens = 4096
system = """
You are an AI coding assistant specializing in documenting code. 
Your task is to analyze the given code snippet and add comments documenting any type or function defintions.
Follow these steps:\n\n
1. Analyze the code context and structure.\n
2. Determine the purpose of the defined types or functions based on context, usage, and naming.\n
3. Add documentation in the form of comments.\n
4. Return the code snippet with only the comments added. Do not alter the code or any existing comments.\n\n
"""

[[language-server.lsp-ai-code.config.actions.parameters.messages]]
role = "user"
content = "{SELECTED_TEXT}"

