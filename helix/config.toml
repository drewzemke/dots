theme = "drewcula"

[editor]
bufferline = "multiple"
color-modes = true
cursorline = true
end-of-line-diagnostics = "hint"
idle-timeout = 200
jump-label-alphabet = "jfkdlsahgmvznbyturieowpq"
line-number = "relative"
popup-border = "all"
shell = ["fish", "-c"]
true-color = true
rainbow-brackets = true

[editor.cursor-shape]
insert = "bar"
normal = "block"

[editor.statusline]
left = ["mode", "spinner", "version-control", "file-name"]
right = [
  "selections",
  "position",
  "separator",
  "spacer",
  "diagnostics",
  "workspace-diagnostics",
]

[editor.inline-diagnostics]
cursor-line = "hint"
# other-lines = "hint"

[editor.file-picker]
hidden = false
git-ignore = false

[editor.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
"'" = "'"

[editor.indent-guides]
render = true

[editor.lsp]
display-messages = true
display-inlay-hints = true

#########################
# key mappings
#########################

[keys.insert]
C-space = "code_action"
"A->" = "indent"
"A-<" = "unindent"
"A-p" = "paste_before"

# spanish characters
"A-a" = "@á"
"A-e" = "@é"
"A-i" = "@í"
"A-o" = "@ó"
"A-g" = "@ö"
"A-u" = "@ú"
"A-n" = "@ñ"
"A-A" = "@Á"
"A-E" = "@É"
"A-I" = "@Í"
"A-O" = "@Ó"
"A-G" = "@Ö"
"A-U" = "@Ú"
"A-N" = "@Ñ"

[keys.normal]
# move lines up/down
A-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
A-k = [
  "extend_to_line_bounds",
  "delete_selection",
  "move_line_up",
  "paste_before",
]

# copy lines up/down
A-J = ["extend_to_line_bounds", "yank", "paste_after"]
A-K = ["extend_to_line_bounds", "yank", "paste_before"]

# move selection left/right
A-l = ["delete_selection", "paste_after"]
A-h = ["delete_selection", "move_char_left", "paste_before"]

# copy selection left/right
A-L = ["yank", "paste_after"]
A-H = ["yank", "paste_before"]

# close the current buffer
C-w = ":buffer-close"

# save the current buffer
C-s = ":write"

# save the jumplist location
C-j = "save_selection"

# move between windows
C-l = "jump_view_right"
C-h = "jump_view_left"

# move between buffers
L = "goto_next_buffer"
H = "goto_previous_buffer"

# select previous line (opposite of 'x')
X = "extend_line_above"

# smart tab?
tab = "smart_tab"

# faster keybinding for jumpmode
"'" = "goto_word"
"A-'" = "extend_to_word"

# alt+motion to extend selections  
"A-w" = "extend_next_word_start"
"A-W" = "extend_next_long_word_start"
"A-e" = "extend_next_word_end"
"A-E" = "extend_next_long_word_end"
"A-b" = "extend_prev_word_start"
"A-B" = "extend_prev_long_word_start"
"A-f" = "extend_next_char"
"A-t" = "extend_till_char"

# move by subwords
"C-e" = "move_next_sub_word_end"
"C-b" = "move_prev_sub_word_start"
"A-C-e" = "extend_next_sub_word_end"
"A-C-b" = "extend_prev_sub_word_start"

# puts cursors at the beginning and end of every selection block
"A-S" = "@msξsξ<ret>d"

# pipes the selected text to fish
# the first replaces the selection and the second prints output underneath
"A-r" = "@|fish<ret>"
"A-R" = "@<A-J>|fish<ret>\"uy2u\"up"

# load external changes
C-r = ":reload-all"

[keys.normal.space]
F = "file_picker"
f = "file_picker_in_current_directory"
H = ["search_selection", "select_all", "select_regex"]
L = ":lsp-restart"
l = "@:lsp-workspace-command "
C-f = ["search_selection", "global_search"]

[keys.normal.space.t]
f = ":toggle auto-format"
g = ":toggle file-picker.git-ignore"
h = ":toggle file-picker.hidden"
i = ":toggle lsp.display-inlay-hints"
w = ":toggle soft-wrap.enable"

[keys.normal.backspace]
b = ":run-shell-command zellij run -f -- just build"
r = ":run-shell-command zellij run -f -- just run"
t = ":run-shell-command zellij run -f -- just test"
E = ":run-shell-command zellij run -fc -- broot"
e = ":run-shell-command zellij run -fc -- broot $(dirname %{buffer_name})"
g = ":run-shell-command zellij run -fc -- gitui"
j = ":run-shell-command zellij run -fc -- jjui"
c = ["wonly", "vsplit", ":open chat.md"]
s = ["wonly", "vsplit", ":open %sh{map_spec_name %{buffer_name}}"]

[keys.normal.g]
D = ["wonly", "vsplit", "goto_definition"]

# git commands
[keys.normal.G]
r = ":reset-diff-change"
b = ":sh git line-info %{cursor_line} %{buffer_name}"
u = ":sh git url %{buffer_name} %{cursor_line} | pbcopy"

# jump commands
[keys.select]
"'" = "extend_to_word"
"A-'" = "extend_to_word"

# move lines up/down
A-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
A-k = [
  "extend_to_line_bounds",
  "delete_selection",
  "move_line_up",
  "paste_before",
]

# copy lines up/down
A-J = ["extend_to_line_bounds", "yank", "paste_after"]
A-K = ["extend_to_line_bounds", "yank", "paste_before"]

# move selection left/right
A-l = ["delete_selection", "paste_after"]
A-h = ["delete_selection", "move_char_left", "paste_before"]

# copy selection left/right
A-L = ["yank", "paste_after"]
A-H = ["yank", "paste_before"]

# language-specfic utilities -- rust
[keys.normal.space.u.r]
# wrap a selected type in `Option<...>` or `Result<...>`
#  - add <..> around the selection
#  - type Option/Result in front of it
#  - yank, undo changes, then paste so that this is easily undoable
o = "@ms<lt>iOption<esc><A-o>d3uR"
r = "@ms<lt>iResult<esc><A-o>d3uR"

# language-specfic utilities -- JS/TS
[keys.normal.space.u.t]
# add a console.log for a selected symbol:
#  - copy selected to an unused buffer
#  - add a new line and type the start of the console.log
#  - paste the name the copied thing inside the first arg to log
#  - add a comma then paste the thing again as the second arg to log
#  - yank, undo everything, then paste again so that this is easily undoable
l = "@\"uyoconsole.log('✨✨✨ <esc>\"uPa:<esc>la, <esc>\"upxy5up"

# language-specfic utilities -- markdown
[keys.normal.space.u.m]
# replace all selected instances of `- [ ]` with `- [.]`
#  - select `[ ]`
#  - select the space
#  - replace it with a dot
d = "@s\\[ \\]<ret>s <ret>r."
# does the same as above but puts an 'x' instead of a dot
x = "@s\\[ \\]<ret>s <ret>rx"
# insert the title of the file as a markdown header
t = "@gg:insert-output echo %{buffer_name} | sed 's/.*\\///; s/\\..*//'<ret>i# <esc>x"

# notes-specfic utilities
[keys.normal.space.u.n]
# open today's note
t = ':open "daily/%sh{date +%%Y-%%m-%%d}.md"'
# open tomorrow'ss note
T = ':open "daily/%sh{date -v +1d +%%Y-%%m-%%d}.md"'
# open next Monday's  note
m = ':open "daily/%sh{date -v +Mon +%%Y-%%m-%%d}.md"'
# open today's journal entry, creating it from a template if it doesn't exit
# (this only works in the notes repo)
J = ":open %sh{./scripts/journal.fish}"
