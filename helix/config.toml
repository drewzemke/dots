theme = "drewcula"

[editor]
bufferline = "multiple" 
color-modes = true
cursorline = true
end-of-line-diagnostics = "hint" 
idle-timeout = 200
jump-label-alphabet = "jfkdlsahgmvznbyturieowpq"
line-number = "relative"
popup-border = "all"
shell = ["fish", "-c"]
true-color = true

[editor.cursor-shape]
insert="bar"
normal="block"

[editor.statusline]
left = ["mode", "spinner", "version-control", "file-name"]
right = ["selections", "position", "separator", "spacer", "diagnostics", "workspace-diagnostics"]

[editor.inline-diagnostics]
cursor-line = "hint"
# other-lines = "hint"

[editor.file-picker]
hidden = false
git-ignore = false

[editor.auto-pairs]
'(' = ')'
'{' = '}'
'[' = ']'
'"' = '"'
'`' = '`'
"'" = "'"

[editor.indent-guides]
render = true

[editor.lsp]
display-messages = true
display-inlay-hints = true

#########################
# key mappings
#########################

[keys.insert]
C-space = "code_action"

[keys.normal]
# move lines up/down
A-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
A-k = ["extend_to_line_bounds", "delete_selection", "move_line_up", "paste_before"]

# copy lines up/down
A-J = ["extend_to_line_bounds", "yank", "paste_after"]
A-K = ["extend_to_line_bounds", "yank", "paste_before"]  

# move selection left/right
A-l = ["delete_selection", "paste_after"]
A-h = ["delete_selection", "move_char_left", "paste_before"]

# copy selection left/right
A-L = ["yank", "paste_after"]
A-H = ["yank", "paste_before"]

# close the current buffer
C-w = ":buffer-close"

# save the current buffer
C-s = ":write"

# move between windows
C-l = "jump_view_right"
C-h = "jump_view_left"

# move between buffers
L = "goto_next_buffer"
H = "goto_previous_buffer"

# select previous line (opposite of 'x')
X = "extend_line_above"

# smart tab?
tab = "smart_tab"
        
# faster keybinding for jumpmode
"'"   = "goto_word"
"A-'" = "extend_to_word"

# alt+motion to extend selections  
"A-w" = "extend_next_word_start"
"A-W" = "extend_next_long_word_start"
"A-e" = "extend_next_word_end"
"A-E" = "extend_next_long_word_end"
"A-b" = "extend_prev_word_start"
"A-B" = "extend_prev_long_word_start"
"A-f" = "extend_next_char"
"A-t" = "extend_till_char"

# move by subwords
"C-e" = "move_next_sub_word_end"
"C-b" = "move_prev_sub_word_start"
"A-C-e" = "extend_next_sub_word_end"
"A-C-b" = "extend_prev_sub_word_start"

# puts cursors at the beginning and end of every selection block
"A-S" = "@msξsξ<ret>d"

# pipes the selected text to fish
# the first replaces the selection and the second prints output underneath
"A-r" = "@|fish<ret>"
"A-R" = "@<A-J>|fish<ret>\"uy2u\"up"

[keys.normal.space]
F = "file_picker"
f = "file_picker_in_current_directory"
H = ["search_selection", "select_all", "select_regex"]
L = ":lsp-restart"
C-f = ["search_selection", "global_search"]
C-r = ":reload-all" 

[keys.normal.space.t]
g = ":toggle file-picker.git-ignore"
h = ":toggle file-picker.hidden"
i = ":toggle lsp.display-inlay-hints"
w = ":toggle soft-wrap.enable"

[keys.normal.backspace]
b = ":run-shell-command zellij run -f -- just build"
r = ":run-shell-command zellij run -f -- just run"
t = ":run-shell-command zellij run -f -- just test"
e = ":run-shell-command zellij run -fc -- broot"
g = ":run-shell-command zellij run -fc -- gitui"
c = ["wonly", "vsplit", ":open chat.md"]
# opens .spec file for currently-focused file:
#  - paste the current file name, 
#  - append working directory 
#  - use utility to map to spec file name, 
#  - open in other split,
#  - undo to clean up
s = "@,] j\"%P<A-;>!pwd<ret>a/<esc>x:pipe map_spec_name<ret> wo wF<C-h>5u<C-l>"

[keys.normal.g]
D = ["wonly", "vsplit", "goto_definition"]

# git commands
[keys.normal.G]
r = ":reset-diff-change"

# jump commands
[keys.select]
"'"   = "extend_to_word"
"A-'" = "extend_to_word"

# move lines up/down
A-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
A-k = ["extend_to_line_bounds", "delete_selection", "move_line_up", "paste_before"]

# copy lines up/down
A-J = ["extend_to_line_bounds", "yank", "paste_after"]
A-K = ["extend_to_line_bounds", "yank", "paste_before"]  

# move selection left/right
A-l = ["delete_selection", "paste_after"]
A-h = ["delete_selection", "move_char_left", "paste_before"]

# copy selection left/right
A-L = ["yank", "paste_after"]
A-H = ["yank", "paste_before"]

# language-specfic utilities -- rust
[keys.normal.space.u.r]
# wrap a selected type in `Option<...>` or `Result<...>`
#  - add <..> around the selection
#  - type Option/Result in front of it
#  - yank, undo changes, then paste so that this is easily undoable
o = "@ms<lt>iOption<esc><A-o>d3uR"
r = "@ms<lt>iResult<esc><A-o>d3uR"

# language-specfic utilities -- JS/TS
[keys.normal.space.u.t]
# add a console.log for a selected symbol:
#  - copy selected to an unused buffer
#  - add a new line and type the start of the console.log
#  - paste the name the copied thing inside the first arg to log
#  - add a comma then paste the thing again as the second arg to log
#  - yank, undo everything, then paste again so that this is easily undoable
l = "@\"uyoconsole.log('✨✨✨ <esc>\"uPa:<esc>la, <esc>\"upxy5up"

# language-specfic utilities -- markdown
[keys.normal.space.u.m]
# replace all selected instances of `- [ ]` with `- [.]`
#  - select `[ ]`
#  - select the space
#  - replace it with a dot
d = "@s\\[ \\]<ret>s <ret>r."
